name: "Integration Tests"
on:
  pull_request_target:
    types:
      - labeled
jobs:
  "build_image":
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'ok to test' }}
    steps:
      - name: Remove label
        uses: andymckay/labeler@master
        with:
          remove-labels: "ok to test"
        if: always()
      - uses: actions/checkout@v3
        with:
          ref: "${{ github.event.pull_request.head.sha }}"
      - uses: actions/setup-go@v3
        with:
          go-version: '~1.21.3'
      - name: Build dev image
        run: |
          make save-tel2-image
      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: build-output/tel2-image.tar
  run_tests:
    strategy:
      fail-fast: false
      matrix:
        runners:
          - ubuntu-latest
          - ubuntu-arm64
          - macos-latest
          - windows-2019
          - macOS-arm64
        clusters:
          - distribution: Kubeception
            version: "1.26"
    runs-on: ${{ matrix.runners }}
    needs: "build_image"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"
      - uses: ./.github/actions/install-dependencies
        name: install dependencies
      - uses: actions/download-artifact@v3
        with:
          name: image
      - if: runner.os == 'Linux' && runner.arch == 'arm64'
        name: install dependencies for arm64
        run: |
          sudo rm -f /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -y
          sudo apt-get install -y socat gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu make jq uidmap
      - if: runner.os == 'Linux' && runner.arch == 'arm64'
        name: install docker for arm64
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          dockerd-rootless-setuptool.sh install
      - run: make build
      - uses: ./.github/actions/prepare-cluster
        with:
          kubeception-token: ${{ secrets.DEV_TELEPRESENCE_KUBECEPTION_TOKEN }}
          kubeceptionProfile: small
          gke-credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          tel-image: tel2-image.tar
          cluster-distribution: ${{ matrix.clusters.distribution }}
          cluster-version: ${{ matrix.clusters.version }}
        id: kluster
      - uses: ./.github/actions/integration-tests
        with:
          kubeconfig: "${{ steps.kluster.outputs.kubeconfig }}"
      - uses: ./.github/actions/upload-logs
        env:
          LOG_SUFFIX: "${{ runner.os }}-${{ runner.arch }}-${{ matrix.clusters.distribution }}-${{ matrix.clusters.version }}"
        if: always()
