################################################################################
## Deployment Configuration
################################################################################

# The Traffic Manager only support running with one replica at the moment.
# Configuring the replicaCount will be added in future versions of Telepresence

# replicaCount: 1

# The Telepresence client will try to ensure that the Traffic Manager image is
# up to date and from the right registry. If you are changing the value below,
# ensure that the tag is the same as the client version and that the
# TELEPRESENCE_REGISTRY environment variable is equal to image.repository.
#
# The client will default to docker.io/datawire/tel2:{{CLIENT_VERSION}}

image:
  registry: docker.io/datawire
  name: tel2
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

  imagePullSecrets: []

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

## @param priorityClassName Name of the existing priority class to be used
## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

################################################################################
## Traffic Manager Service Configuration
################################################################################

service:
  type: ClusterIP

################################################################################
## Traffic Manager Configuration
################################################################################

# The log level of the Traffic Manager.
#
# Default: info
logLevel: info

# GRPC configuration for the Traffic Manager.
# This is identical to the grpc configuration for local clients.
# See https://www.telepresence.io/docs/latest/reference/config/#grpc for more info
grpc: {}
  # maxReceiveSize configures the maximum message size that the traffic manager will service.
  # maxReceiveSize: 4Mi

# podCIDRs is the verbatim list of CIDRs used when the podCIDRStrategy is set to environment
podCIDRs: []

# podCIDRStrategy controls what strategy the traffic-manager will use for finding out what
# CIDRs the cluster is using for its pods. Valid values are:
#
#  nodePodCIDRs extract CIDRs from the podCIDR and podCIDRs field of the Node Spec.
#  coverPodIPs  extract IPs from the podIP and podIPs field of the Pod Status and compute the CIDRs needed to cover those IPs.
#  environment  use CIDRs listed in the space separated POD_CIDRS environment variable verbatim.
#  auto         first try nodePodCIDRs and if that fails, tru coverPodIPs
#
# Default: auto
podCIDRStrategy: auto

# systemaHost is used by the traffic-manager when using an extension
# or features that require a specific extension.
#
# Default: app.getambassador.io
systemaHost: "app.getambassador.io"

# systemaPort is the port used with systemaHost
#
# Default: 443
systemaPort: "443"

# Telepresence requires a license key for creating selective intercepts. In
# normal clusters with access to the public internet, this license is managed
# automatically by the Ambassador Cloud. In air-gapped environments however,
# you need to get a license and add it to your cluster manually.
# https://www.getambassador.io/docs/telepresence/latest/reference/cluster-config/#air-gapped-cluster
#
# Leave this unset unless you are running in an air-gapped environment.
licenseKey:

  # Creates the Volume and VolumeMounts for reading and managing the license key.
  #
  # Default: false
  create: false

  # Value of the licence you get from the Ambassador cloud
  #
  # Default: ""
  value: ""

  # Configure the Helm Chart to manage the Secret the Traffic Manager will use
  # to read the license key.
  secret:

    # Create the Secret with the Helm release create
    #
    # Default: true
    create: true

    # Name of the Secret created (if create is true) and the Secret that will be
    # mounted as a Volume for the Traffic Manager to read
    #
    # Default: systema-license
    name: systema-license


managerRbac:
  # Default: true
  create: true

  # Whether the manager rbac should limit itself to only certain namespaces
  # Default: false
  namespaced: false

  # If namespaced is true, which namespaces the managerRbac should apply to
  namespaces: []


################################################################################
## Agent Injector Configuration
################################################################################
agentInjector:
  name: agent-injector
  agentImage:
    registry: docker.io/datawire
    name: ""
    tag: ""
  service:
    type: ClusterIP
    ports:
    - name: https
      port: 443
      targetPort: https
  secret:
    name: mutator-webhook-tls
  certificate:
    regenerate: false
  webhook:
    name: agent-injector-webhook
    admissionReviewVersions: ["v1"]
    servicePath: /traffic-agent
    port: 443
    failurePolicy: Ignore
    sideEffects: None
    timeoutSeconds: 5
  appPortStrategy: http2Probe

################################################################################
## Telepresence API Server Configuration
################################################################################
telepresenceAPI:
  # The port on agent's localhost where the API service can be found
  # Default: 0
  port: 0

################################################################################
## User Configuration
################################################################################

# Telepresence requires admin permissions for installation. Creating intercepts
# requires lower permissions. Use the following configurations to create roles
# so non-admin users can create intercepts.
#
# You do not need to create any extra RBAC if your users are cluster admins.
# For more on how telepresence uses rbac, check out:
# https://www.getambassador.io/docs/telepresence/latest/reference/rbac/
clientRbac:

  # Create the extra RBAC for non-admin users.
  #
  # Default: false
  create: false

  # The user accounts to bind to the Roles created by this chart. This can be a
  # ServiceAccount, user account, user group, etc. depending on how accounts are
  # managed in your cluster.
  # This MUST be set.
  #
  # Default: []
  subjects: []
    # - kind: User
    #   name: jane
    #   apiGroup: rbac.authorization.k8s.io

  # Create namespaced RoleBindings so that users only have access to create
  # intercepts in certain namespaces.
  #
  # Default: false
  namespaced: false

  # The namespaces to create the RoleBindings in. No effect if namespaced: false
  # Ambassador must always be one of the namespaces users have access to.
  #
  # Default: ambassador
  namespaces:
  - ambassador

rbac:
  # Configure this release to ONLY create the rbac-related objects. This allows for RBAC and the
  # installation to be managed separately. This can be used in conjunction with clientRbac.create=true
  # and managerRbac.create=true to select which sets of rbac objects you wish to create.
  #
  # Default: false
  only: false
