#!/usr/bin/make -f

# Copyright 2018 Datawire. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

TELEPRESENCE_REGISTRY ?=
VERSION_SUFFIX        ?= -$(OS)-$(TIME)
PYTEST_ARGS           ?=

#

ifeq ($(shell which kubectl 2>/dev/null),)
$(error Required executable 'kubectl' not found on $$PATH)
endif

ifneq ($(filter check docker-build docker-push,$(or $(MAKECMDGOALS),check)),)
ifeq ($(TELEPRESENCE_REGISTRY),)
$(error You must specify a registry with TELEPRESENCE_REGISTRY=)
endif
endif

# Presence of this variable in pip processes we launch causes pip to
# write the wrong #! line.  Only expected to be set on OS X.
# https://bugs.python.org/issue22490
undefine __PYENV_LAUNCHER__

_OS := $(shell python3 -c 'from time import time; from sys import platform; print({"linux": "LNX", "darwin": "OSX"}.get(platform))')
_TIME := $(shell date +%s)
TELEPRESENCE_VERSION := $(shell git describe --tags)$(foreach OS,$(_OS),$(foreach TIME,$(_TIME),$(VERSION_SUFFIX)))

# Attempt to get credentials cached early on while the user is still
# looking at the terminal.  They'll be required later on during the test
# suite run and the prompt is likely to be buried in test output at that
# point.
ifeq ($(filter check,$(or $(MAKECMDGOALS),check)),check)
_ = $(shell sudo echo -n)
endif

#

check: private export TELEPRESENCE_REGISTRY := $(TELEPRESENCE_REGISTRY)
check: private export TELEPRESENCE_VERSION  := $(TELEPRESENCE_VERSION)
check: private export SCOUT_DISABLE         := 1
check: virtualenv docker-push  ## Run the test suite (implies 'virtualenv' and 'docker-push')
	sudo echo -n
	$(VIRTUALENV) py.test -v --timeout=360 --timeout-method=thread $(PYTEST_ARGS)
.PHONY: check

docker-build:  ## Build Docker images
	docker build --file local-docker/Dockerfile . -t $(TELEPRESENCE_REGISTRY)/telepresence-local:$(TELEPRESENCE_VERSION)
	docker build k8s-proxy -t $(TELEPRESENCE_REGISTRY)/telepresence-k8s:$(TELEPRESENCE_VERSION)
	docker build k8s-proxy --file k8s-proxy/Dockerfile.privileged -t $(TELEPRESENCE_REGISTRY)/telepresence-k8s-priv:$(TELEPRESENCE_VERSION)
.PHONY: docker-build

docker-push: docker-build  ## Push Docker images to TELEPRESENCE_REGISTRY (implies 'docker-build')
	docker push $(TELEPRESENCE_REGISTRY)/telepresence-k8s:$(TELEPRESENCE_VERSION)
	docker push $(TELEPRESENCE_REGISTRY)/telepresence-k8s-priv:$(TELEPRESENCE_VERSION)
	docker push $(TELEPRESENCE_REGISTRY)/telepresence-local:$(TELEPRESENCE_VERSION)
.PHONY: docker-push

VIRTUALENV = PATH=$$PWD/virtualenv/bin:$$PATH
PIP = $(VIRTUALENV) pip
virtualenv: dev-requirements.txt k8s-proxy/requirements.txt  ## Set up Python3 virtual environment for development
	rm -rf $@ || true
	virtualenv --python=python3 $@
	$(PIP) install flake8
	$(PIP) install -r dev-requirements.txt
	$(PIP) install -r k8s-proxy/requirements.txt
	$(PIP) install git+https://github.com/datawire/sshuttle.git@telepresence
	$(PIP) install -e .

lint: virtualenv  ## Run the linters used by CI (implies 'virtualenv')
	./tools/license-check
	$(VIRTUALENV) yapf -dr telepresence packaging
	$(VIRTUALENV) flake8 --isolated local-docker k8s-proxy telepresence setup.py packaging
	$(VIRTUALENV) pylint -f parseable -E local-docker k8s-proxy telepresence setup.py packaging/*.py
	$(VIRTUALENV) mypy --strict-optional telepresence local-docker/entrypoint.py packaging/*.py
	$(VIRTUALENV) mypy --ignore-missing-imports k8s-proxy
	$(VIRTUALENV) telepresence --help
.PHONY: lint

#

help:  ## Show this message
	@echo 'usage: ./build [TARGETS...] [VARIABLES...]'
	@echo
	@echo VARIABLES:
	@sed -n '/[?]=/s/^/  /p' ${MAKEFILE_LIST}
	@echo
	@echo TARGETS:
	@sed -n 's/:.*[#]#/:#/p' ${MAKEFILE_LIST} | column -t -c 2 -s ':#' | sed 's/^/  /'
.PHONY: help
