# https://circleci.com/docs/2.0/

version: 2
workflows:
  version: 2
  ci:
    jobs:
      - build-image

      - build-macos:
          requires:
            - "build-image"

      # This would be excellent to enable.  The next big hurdle preventing us
      # from doing so is the mysterious inability to pull images from gcr.io
      # in the CircleCI build environment.
      #
      # - build-linux:
      #     requires:
      #       - "build-image"

jobs:
  build-image:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/
      # https://hub.docker.com/r/circleci/python/
      - image: "circleci/python:3"

    steps:
      # https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: "update system"
          command: |
            sudo apt-get --quiet update

      - "checkout"

      - run:
          name: "decrypt gcloud keys"
          command: |
            # To update:
            #   1) Generate a new key and IV:
            #      $ dd if=/dev/urandom count=64 bs=1 | md5sum
            #   2) Update GCLOUD_KEY and GCLOUD_IV in CircleCI "Environment
            #      Variables" configuration for Telepresence project.
            #   3) Encrypt the new gcloud key:
            #      $ ci/encrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV
            ci/decrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV

      - run:
          name: "setup non-Python environment"
          command: |
            sudo pip install --upgrade pip virtualenv
            ./environment-setup.sh datawireio telepresence-testing us-central1-a linux

      - run:
          name: "configure gcloud"
          command: |
            echo 'PATH=${HOME}/google-cloud-sdk/bin:${PWD}/ci:${PATH}' >> ${BASH_ENV}
            echo 'PATH=${PWD}:${PATH}' >> ${BASH_ENV}

      - run:
          name: "setup Python environment"
          command: |
            ./build --registry gcr.io/datawireio --manage-virtualenv

      - run:
          name: "build and push image"
          command: |
            ./build --registry gcr.io/datawireio --version-suffix "" --build-and-push

  build-linux:
    machine:
      enabled: true
      # https://circleci.com/docs/2.0/configuration-reference/#machine
      image: "circleci/classic:201711-01"

    environment:
      - PROJECT_NAME: "datawireio"

    steps:
      - run:
          name: "update system"
          command: |
            sudo apt-get --quiet update

      - "checkout"

      - run:
          name: "decrypt gcloud keys"
          command: |
            # To update:
            #   1) Generate a new key and IV:
            #      $ dd if=/dev/urandom count=64 bs=1 | md5sum
            #   2) Update GCLOUD_KEY and GCLOUD_IV in CircleCI "Environment
            #      Variables" configuration for Telepresence project.
            #   3) Encrypt the new gcloud key:
            #      $ ci/encrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV
            ci/decrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV

      - run:
          name: "setup non-Python environment"
          command: |
            # https://raw.githubusercontent.com/circleci/image-builder/picard-vm-image/provision.sh
            pyenv global 2.7.12 3.5.2
            ./environment-setup.sh datawireio telepresence-testing us-central1-a linux
            echo 'PATH=${PWD}:${PATH}' >> ${BASH_ENV}

      - run:
          name: "setup Python environment"
          command: |
            ./build --registry gcr.io/datawireio --manage-virtualenv

      - run:
          name: "run tests"
          command: |
            ./build --circle

  build-macos:
    macos:
      xcode: "9.0"

    environment:
      - PROJECT_NAME: "datawireio"

    steps:
      - "checkout"

      - run:
          name: "decrypt gcloud keys"
          command: |
            # To update:
            #   1) Generate a new key and IV:
            #      $ dd if=/dev/urandom count=64 bs=1 | md5sum
            #   2) Update GCLOUD_KEY and GCLOUD_IV in CircleCI "Environment
            #      Variables" configuration for Telepresence project.
            #   3) Encrypt the new gcloud key:
            #      $ ci/encrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV
            ci/decrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV

      - restore_cache:
          key: "system-components"

      - run:
          name: "setup non-Python environment"
          command: |
            # Note hard-coded OSX platform
            ./environment-setup.sh datawireio telepresence-testing us-central1-a osx

      - save_cache:
          key: "system-components"
          paths:
            - "~/Library/Caches/Homebrew"
            - "~/google-cloud-sdk/"

      - restore_cache:
          key: |
            pip-http-cache-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}-{{ checksum "k8s-proxy/requirements.txt" }}-{{ checksum "setup.py" }}

      - run:
          name: "configure gcloud"
          command: |
            echo 'PATH=${HOME}/google-cloud-sdk/bin:${PATH}' >> ${BASH_ENV}

      - run:
          name: "setup Python environment"
          command: |
            ./build --registry gcr.io/datawireio --manage-virtualenv

      - save_cache:
          key: |
            pip-http-cache-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}-{{ checksum "k8s-proxy/requirements.txt" }}-{{ checksum "setup.py" }}
          paths:
            # OSX specific
            - "~/Library/Caches/pip/"

      - run:
          name: "run lint checks"
          command: |
            ./build --registry gcr.io/datawireio --flake8 --pylint --mypy

      - run:
          name: "run tests"
          command: |
            ./build --circle
