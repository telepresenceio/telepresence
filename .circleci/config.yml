# This configuration makes use of the following things defined in the
# CircleCI webui:
#
#  - A context named "telepresence2-release".  The context sets the
#    following environment variables:
#     + DOCKERHUB_USERNAME
#     + DOCKERHUB_PASSWORD
#     + AWS_ACCESS_KEY_ID (for S3)
#     + AWS_SECRET_ACCESS_KEY (for S3)
#     + TELEPRESENCE_KUBECEPTION_TOKEN

version: 2.1

orbs:
  win: circleci/windows@2.2.0

executors:

  "vm-linux":
    machine:
      image: "ubuntu-2004:202008-01"

  "vm-macos":
    macos:
      xcode: "12.2.0" # macOS 10.15.5

commands:

  "install-go":
    parameters:
      version:
        type: string
        default: "1.16"
    steps:
      - run:
          name: "Install Go << parameters.version >>"
          command: |
            set -x
            if [[ $OS == Windows_NT ]]; then
              curl https://dl.google.com/go/go<< parameters.version >>.windows-amd64.zip -o /tmp/go.zip
              mv /c/go /c/go-112
              unzip -q /tmp/go.zip -d /c/
            else
              curl https://dl.google.com/go/go<< parameters.version >>.$(uname -s | tr A-Z a-z)-amd64.tar.gz -o /tmp/go.tar.gz
              tar -C /tmp -xzf /tmp/go.tar.gz
              echo 'export PATH=/tmp/go/bin:$PATH' >> "$BASH_ENV"
              if [ -z "$(/tmp/go/bin/go env GOPROXY)" ]; then
                echo 'export GOPROXY=https://proxy.golang.org' >> "$BASH_ENV"
              fi
              . "$BASH_ENV"
            fi
            go version

  "install-kubectl":
    parameters:
      version:
        type: string
        default: "1.19.3"
    steps:
      - run:
          name: "Install kubectl << parameters.version >>"
          command: |
            if [[ $OS == Windows_NT ]]; then
              curl -LO https://dl.k8s.io/release/v<< parameters.version >>/bin/windows/amd64/kubectl.exe
              mv kubectl.exe /c/kubectl.exe
            else
              curl -L --fail -o /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.version >>/bin/$(uname -s | tr A-Z a-z)/amd64/kubectl
              sudo install /tmp/kubectl /usr/local/bin/kubectl
            fi

  "prepare-kluster":
    parameters:
      platform:
        type: string
    steps:
      - run:
          name: "Create cluster"
          command: |
            go run build-aux/create_test_cluster.go create "tp-ci-<< parameters.platform >>-${CIRCLE_SHA1}" > "$HOME/kubeconfig"
            export KUBECONFIG="$HOME/kubeconfig"
            go run build-aux/wait_for_cluster.go "$KUBECONFIG"
            KUBECTL=kubectl
            IMAGE=/tmp/workspace/tel2-image.tar
            if [[ $OS == Windows_NT ]]; then
              KUBECTL=/c/kubectl.exe
              IMAGE=/c/workspace/tel2-image.tar
            fi
            $KUBECTL apply -f build-aux/image-importer.yaml
            POD_NAME=$($KUBECTL get pod -ojsonpath='{.items[0].metadata.name}' -l app=image-importer)
            $KUBECTL wait --for=condition=ready pod $POD_NAME
            $KUBECTL cp "$IMAGE" "$POD_NAME:/tmp/image.tar"
            $KUBECTL exec $POD_NAME -- //hostbin/ctr images import //tmp/image.tar

  "cleanup-kluster":
    parameters:
      platform:
        type: string
    steps:
      - run:
          name: "Destroy cluster"
          command: |
            go run build-aux/create_test_cluster.go destroy "tp-ci-<< parameters.platform >>-${CIRCLE_SHA1}" > "$HOME/kubeconfig"

  "install-sshfs":
    steps:
      - run:
          name: "Install sshfs"
          command: |
            sudo apt-get update
            sudo apt-get install -y sshfs
            sudo sh -c 'echo user_allow_other >> /etc/fuse.conf'

  "dirty-check":
    steps:
      - run:
          name: "Dirty check"
          command: |
            # On Windows, `git status` doesn't record no-op
            # line-ending changes in to the index, so things show as
            # dirty even if they aren't.  Trying to `add` them does
            # trigger the appropriate index update.  So do a `git add`
            # *before* the `git status --porcelain` to work around
            # Windows being terrible; we'd otherwise put the `git add`
            # inside of the `if` block to help generate better output
            # for `git diff`.
            git add .
            if [[ -n "$(git status --porcelain)" ]]; then
               PAGER= git diff --cached
               exit 1
            fi

  "save-logs":
    steps:
      - run:
          name: "Gather logs"
          when: always
          command: |
            rsync -ma --include='*/' --include='*.tap' --include='*.log' --include='Test*.webm' --exclude='*' . /tmp/test-logs
            for file in \
              {"${XDG_CACHE_HOME:-$HOME/.cache}/telepresence/logs","$HOME/Library/Logs/telepresence"}/*.log
            do
              if [ -s "$file" ]; then
                cp "$file" /tmp/test-logs
              fi
            done
      - store_artifacts:
          name: "Store logs"
          path: /tmp/test-logs
          destination: test-logs

jobs:

  "build-dev-image":
    executor: vm-linux
    steps:
      - checkout
      - install-go
      - run:
          name: Build dev image
          command: |
            TAG="2.0.0-gotest.$CIRCLE_SHA1"
            TELEPRESENCE_VERSION="v${TAG}" make image
            mkdir -p /tmp/workspace
            docker save "datawire/tel2:${TAG}" > /tmp/workspace/tel2-image.tar
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - tel2-image.tar

  "build-and-test-windows":
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - install-go
      - install-kubectl
      - attach_workspace:
          at: "C:\\workspace"
      - prepare-kluster:
          platform: windows
      - run:
          command: |
            DTEST_KUBECONFIG="$HOME/kubeconfig" PATH="/c/:$PATH" DTEST_REGISTRY="docker.io/datawire" go test -timeout=20m ./...
          no_output_timeout: 25m
      - cleanup-kluster:
          platform: windows

  "build-and-test":
    executor: vm-linux
    steps:
      - checkout
      - install-go
      - run: make build
      - install-kubectl
      - install-sshfs
      - attach_workspace:
          at: /tmp/workspace
      - prepare-kluster:
          platform: linux
      - run:
          command: |
            DTEST_KUBECONFIG="$HOME/kubeconfig" DTEST_REGISTRY="docker.io/datawire" make test
          # Both CircleCI and `go test` itself time out after 10m by
          # default.  `go test` gives us helpful output when that
          # happens, CircleCI doesn't.  So lengthen CircleCI's timeout
          # just a bit, so `go test`'s timeout output isn't hidden.
          no_output_timeout: 20m
      - save-logs
      - cleanup-kluster:
          platform: linux

  "lint":
    executor: vm-linux
    steps:
      - checkout
      - install-go
      # Split prep out to reduce noise in the output, and help with
      # timeouts.
      - run: make lint-deps
      - run:
          # Don't hold the Go compiler against golangci-lint's
          # timeout.
          name: "Pre-load Go build cache"
          command: go list ./... | xargs -n1 go test -c -o /dev/null
      - run: make lint

  "generate":
    executor: vm-linux
    steps:
      - checkout
      - run: make generate
      - dirty-check

  "release-linux":
    executor: vm-linux
    steps:
      - checkout
      - install-go
      - run: pip3 install awscli
      - run:
          name: Docker login
          command: |
            docker login -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
      - run: TELEPRESENCE_VERSION=$CIRCLE_TAG make push-images push-executable
      - run: |
          [[ $CIRCLE_TAG == *-* ]] || TELEPRESENCE_VERSION=$CIRCLE_TAG make promote-to-stable

  "release-macos":
    executor: vm-macos
    steps:
      - checkout
      - install-go
      - run: sudo pip3 install awscli
      - run: TELEPRESENCE_VERSION=$CIRCLE_TAG make push-executable
      - run: |
          [[ $CIRCLE_TAG == *-* ]] || TELEPRESENCE_VERSION=$CIRCLE_TAG make promote-to-stable

  "release-chart":
    executor: vm-linux
    steps:
    - checkout
    - run: |
        [[ $CIRCLE_TAG == *-* ]] || BUCKET_DIR="charts" make push-chart
  
  "publish-nightly-linux":
    executor: vm-linux
    steps:
    - checkout
    - install-go
    - run: pip3 install awscli
    - run:
        name: Docker login
        command: |
          docker login -u="${DOCKERHUB_USERNAME}" -p="${DOCKERHUB_PASSWORD}"
    - run:
        name: "Publish nightly linux"
        command: |
          newTag=$(go run build-aux/genversion.go nightly)
          TELEPRESENCE_VERSION=$newTag make push-images push-executable
          TELEPRESENCE_VERSION=$newTag make promote-nightly

  "publish-nightly-macos":
    executor: vm-macos
    steps:
    - checkout
    - install-go
    - run: sudo pip3 install awscli
    - run:
        name: "Publish nightly macos"
        command: |
          newTag=$(go run build-aux/genversion.go nightly)
          TELEPRESENCE_VERSION=$newTag make push-executable
          TELEPRESENCE_VERSION=$newTag make promote-nightly

#  "release-finalize":
#    executor: vm-linux
#    steps:
#      - checkout
#      - run: pip3 install awscli
#      - run: TELEPRESENCE_VERSION=$CIRCLE_TAG make promote-to-stable

workflows:

  'Dev':
    jobs:
      - build-dev-image
      - build-and-test:
          context: telepresence2-release
          requires:
            - build-dev-image
      - build-and-test-windows:
          context: telepresence2-release
          requires:
            - build-dev-image
      - lint
      - generate

  'Release':
    jobs:
      - release-linux:
          context: telepresence2-release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release-macos:
          context: telepresence2-release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release-chart:
          context: telepresence2-release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  'Nightly':
    triggers:
    - schedule:
        cron: "0 0 * * 1-5"
        filters:
          branches:
            only:
              - release/v2
    jobs:
      - publish-nightly-linux:
          context: telepresence2-release
      - publish-nightly-macos:
          context: telepresence2-release
      #- release-finalize:
      #    context: telepresence2-release
      #    requires:
      #      - release-linux
      #      - release-macos
      #    filters:
      #      tags:
      #        only: /^v[0-9]+\.[0-9]+\.[0-9+]$/
      #      branches:
      #        ignore: /.*/
