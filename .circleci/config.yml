# https://circleci.com/docs/2.0/
# https://circleci.com/docs/2.0/reusing-config/

version: 2.1
workflows:
  version: 2
  ci:
    jobs:
      #- lint
      - build-image
      #- deploy

      #- build-macos:
      #    requires:
      #      - "build-image"

      #- build-linux:
      #    requires:
      #      - "build-image"

      #- build-testbench:
      #    requires:
      #      - "build-image"

      - build-linux-new:
          requires:
            - build-image

commands:
  forked-PR-return:
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Running for a forked PRs with no credentials, so marking this step successful"
              circleci step halt
            fi
  setup-for-ci:
    steps:
      - run:
          name: Setup the CI environment
          command: |
            ci/setup-for-ci.sh
            echo 'export KUBECONFIG=${HOME}/.kube/$(cat /tmp/kubernaut-claim-name.txt).yaml' >> ${BASH_ENV}
            export KUBECONFIG=${HOME}/.kube/$(cat /tmp/kubernaut-claim-name.txt).yaml
            echo $KUBECONFIG
            kubectl cluster-info
  kubernaut-discard:
    steps:
      - run:
          name: Discard the cluster
          command: |
            kubernaut claims delete $(cat /tmp/kubernaut-claim-name.txt)

jobs:
  build-linux-new:
    machine:
      enabled: true
      # https://circleci.com/docs/2.0/configuration-reference/#machine
      # Ubuntu 14.04 + docker 17.11.0-ce + docker-compose 1.17.1
      image: "circleci/classic:201711-01"
    steps:
      - run: sudo apt-get --quiet update
      - run: pyenv global 2.7.12 3.5.2
      - checkout
      - setup-for-ci
      - run: make virtualenv
      - run: make check DOCKER_PUSH='' VERSION_SUFFIX='' PYTEST_ARGS='--junitxml=test-reports/junit.xml'
      - store_test_results:
          # https://circleci.com/docs/2.0/collect-test-data/#pytest
          path: test-reports
      - kubernaut-discard

  lint:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/
      # https://hub.docker.com/r/circleci/python/
      - image: "circleci/python:3"
    steps:
      - "checkout"
      - run: make virtualenv
      - run: make lint

  build-image:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/
      # https://hub.docker.com/r/circleci/python/
      - image: "circleci/python:3"
    steps:
      # https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker:
          version: 18.05.0-ce
          docker_layer_caching: true
      - "checkout"
      - run: docker login -p "$DOCKER_PASSWORD" -u d6eautomaton
      - run: make docker-push VERSION_SUFFIX=''

  deploy:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/
      # https://hub.docker.com/r/circleci/python/
      - image: "circleci/python:3"
    steps:
      # https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker:
          version: 18.05.0-ce
          docker_layer_caching: true
      - "checkout"
      - run: packaging/deploy.py
      - run: tar cvjf telepresence-dist.tbz dist
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: telepresence-dist.tbz

  build-linux:
    machine:
      enabled: true
      # https://circleci.com/docs/2.0/configuration-reference/#machine
      # Ubuntu 14.04 + docker 17.11.0-ce + docker-compose 1.17.1
      image: "circleci/classic:201711-01"

    environment:
      - PROJECT_NAME: "datawireio"

    steps:
      - run:
          name: "update system"
          command: |
            sudo apt-get --quiet update

      - "checkout"

      - run:
          name: "decrypt gcloud keys"
          command: |
            # To update:
            #   1) Generate a new key and IV:
            #      $ dd if=/dev/urandom count=64 bs=1 | md5sum
            #   2) Update GCLOUD_KEY and GCLOUD_IV in CircleCI "Environment
            #      Variables" configuration for Telepresence project.
            #   3) Encrypt the new gcloud key:
            #      $ ci/encrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV
            ci/decrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV

      - run:
          name: "setup non-Python environment"
          command: |
            # https://raw.githubusercontent.com/circleci/image-builder/picard-vm-image/provision.sh
            pyenv global 2.7.12 3.5.2
            ./environment-setup.sh datawireio telepresence-testing us-central1-a linux
            # If we installed kubectl, it was into ${PWD}
            echo 'PATH=${PWD}:${PATH}' >> ${BASH_ENV}
            # Magic incantation to make kubectl work, because apparently
            # gcloud can't do that correctly (see
            # https://github.com/kubernetes/kubernetes/issues/30617)
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/gcloud-service-key.json' >> ${BASH_ENV}

      - run:
          name: "setup Python environment"
          command: |
            make virtualenv

      - run:
          name: "run tests"
          command: |
            make check DOCKER_PUSH='' VERSION_SUFFIX='' PYTEST_ARGS='--junitxml=test-reports/junit.xml'

      - store_test_results:
          # https://circleci.com/docs/2.0/collect-test-data/#pytest
          path: test-reports

      - run:
          # We can do this at the end of the Linux build because it has a
          # time-based condition for what it cleans up.  It won't get in the
          # way of a concurrent OS X (or other) build because it only looks at
          # reasonably old resources.
          name: "clean cluster"
          command: |
            ./ci/clean-cluster.py

  build-macos:
    macos:
      xcode: "9.0"

    environment:
      - PROJECT_NAME: "datawireio"

    steps:
      - "checkout"

      - run:
          name: "decrypt gcloud keys"
          command: |
            # To update:
            #   1) Generate a new key and IV:
            #      $ dd if=/dev/urandom count=64 bs=1 | md5sum
            #   2) Update GCLOUD_KEY and GCLOUD_IV in CircleCI "Environment
            #      Variables" configuration for Telepresence project.
            #   3) Encrypt the new gcloud key:
            #      $ ci/encrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV
            ci/decrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV

      - restore_cache:
          key: "system-components"

      - run:
          name: "setup non-Python environment"
          command: |
            # Note hard-coded OSX platform
            ./environment-setup.sh datawireio telepresence-testing us-central1-a osx

      - save_cache:
          key: "system-components"
          paths:
            - "~/Library/Caches/Homebrew"
            - "~/google-cloud-sdk/"

      - restore_cache:
          key: |
            pip-http-cache-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}-{{ checksum "k8s-proxy/requirements.txt" }}-{{ checksum "setup.py" }}

      - run:
          name: "configure gcloud"
          command: |
            echo 'PATH=${HOME}/google-cloud-sdk/bin:${PATH}' >> ${BASH_ENV}
            # If we installed kubectl, it was into ${PWD}
            echo 'PATH=${PWD}:${PATH}' >> ${BASH_ENV}
            # Magic incantation to make kubectl work, because apparently
            # gcloud can't do that correctly (see
            # https://github.com/kubernetes/kubernetes/issues/30617)
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/gcloud-service-key.json' >> ${BASH_ENV}

      - run:
          name: "setup Python environment"
          command: |
            make virtualenv

      - save_cache:
          key: |
            pip-http-cache-{{ .Branch }}-{{ checksum "dev-requirements.txt" }}-{{ checksum "k8s-proxy/requirements.txt" }}-{{ checksum "setup.py" }}
          paths:
            # OSX specific
            - "~/Library/Caches/pip/"

      - run:
          name: "run tests"
          command: |
            make check DOCKER_PUSH='' VERSION_SUFFIX='' PYTEST_ARGS='--junitxml=test-reports/junit.xml'

      - store_test_results:
          # https://circleci.com/docs/2.0/collect-test-data/#pytest
          path: test-reports

  build-testbench:
    # Use the Machine executor for now.
    #  https://circleci.com/docs/2.0/configuration-reference/#machine
    #
    # We use Machine instead of Docker because testbench-mkosi needs
    # to run privileged Docker containers, which the Docker executor
    # doesn't support.
    #  https://circleci.com/docs/2.0/executor-types/
    #
    # We may switch to the macOS executor in the future, to enable
    # testbench to run macOS guests.
    machine:
      enabled: true
      # Ubuntu 14.04 + docker 17.11.0-ce + docker-compose 1.17.1
      # If you change this be sure to change the restore_cache/save_cache steps below
      image: "circleci/classic:201711-01"

    steps:

      - restore_cache:
          key: "pyenv-201711-01-3.6.3"
      - run:
          name: "Install Python 3.6"
          command: |
            pyenv versions
            pyenv install --skip-existing 3.6.3
            pyenv global 2.7.12 3.6.3
            pyenv versions
      - save_cache:
          key: "pyenv-201711-01-3.6.3"
          paths:
            - "/opt/circleci/.pyenv"

      - restore_cache:
          key: "qemu-201711-01-3.0.0"
      - run:
          name: "Install QEMU 3.0.0"
          command: |
            set -x
            cd ~
            curl -OL https://download.qemu.org/qemu-3.0.0.tar.xz
            tar xf qemu-3.0.0.tar.xz
            cd qemu-3.0.0
            ./configure --prefix=$HOME/.local \
                        --target-list=x86_64-softmmu \
                        --audio-drv-list='' \
                        --disable-user
            make -j$(nproc)
            make install
      - save_cache:
          key: "qemu-201711-01-3.0.0"
          paths:
            - "/home/circleci/qemu-3.0.0.tar.xz"
            - "/home/circleci/qemu-3.0.0"

      - run:
          name: "Update APT"
          command: |
            sudo apt-get --quiet update

      - run:
          name: "Install testbench"
          command: |
            set -x
            cd ~

            curl -OL http://releases.datawire.io/kubernaut/$(curl http://releases.datawire.io/kubernaut/latest.txt)/linux/amd64/kubernaut
            sudo install -m755 kubernaut /usr/bin/kubernaut
            mkdir -p ~/.config/kubernaut
            # To update:
            #   1) Get a new token from https://kubernaut.io/token
            #   2) Update KUBERNAUT_TOKEN in CircleCI "Environment
            #      Variables" configuration for Telepresence project.
            #      <https://circleci.com/gh/telepresenceio/telepresence/edit#env-vars>
            kubernaut config backend create --url="https://next.kubernaut.io" --name="v2" --activate "$KUBERNAUT_TOKEN"

            sudo apt-get install python3-setuptools qemu-system-x86 ovmf curl haveged

            git clone https://github.com/datawire/testbench
            cd testbench
            python3 setup.py install --user
            echo 'PATH=$HOME/.local/bin:$PATH' >> ${BASH_ENV}

      - "checkout"

      - run:
          name: "decrypt gcloud keys"
          command: |
            # To update:
            #   1) Generate a new key and IV:
            #      $ dd if=/dev/urandom count=64 bs=1 | md5sum
            #   2) Update GCLOUD_KEY and GCLOUD_IV in CircleCI "Environment
            #      Variables" configuration for Telepresence project.
            #   3) Encrypt the new gcloud key:
            #      $ ci/encrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV
            ci/decrypt-gcloud-key circleci $GCLOUD_KEY $GCLOUD_IV

      - run:
          name: "setup non-Python environment"
          command: |
            # Note hard-coded GNU/Linux platform
            ./environment-setup.sh datawireio telepresence-testing us-central1-a linux
            # If we installed kubectl, it was into ${PWD}
            echo 'PATH=${PWD}:${PATH}' >> ${BASH_ENV}
            # Magic incantation to make kubectl work, because apparently
            # gcloud can't do that correctly (see
            # https://github.com/kubernetes/kubernetes/issues/30617)
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=${PWD}/gcloud-service-key.json' >> ${BASH_ENV}

      - restore-cache:
          key: "mkosi.cache-"
      - run:
          name: Prepare testbench
          command: |
            testbench -j$(nproc) prepare
            # Remove cache files that weren't accessed in the last 24
            # hours, to avoid having the the cache keep growing
            # without bound.
            sudo find mkosi.cache -atime +0 -type f -delete
            sudo find mkosi.cache -depth -type d -empty -exec rmdir -- {} \;
      - save_cache:
          key: "mkosi.cache-{{ epoch }}"
          paths:
            - "mkosi.cache"

      - run:
          name: "run testbench"
          command: |
            DISPLAY='' make -j$(nproc) testbench-check DOCKER_PUSH='' VERSION_SUFFIX='' PYTEST_ARGS='-m "new and inject_tcp"'

      - run:
          name: "Delete kubernaut claims"
          when: always
          command: |
            testbench delete-claims

      #- store_test_results:
      #    path: testbench.junit4.xml
      - run:
          name: "Gather testbench report"
          when: always
          command: |
            mkdir -p /tmp/testbench/environments
            cp -t /tmp/testbench --  testbench.html || true
            cp -t /tmp/testbench/environments -- environments/*.tap || true
      - store_artifacts:
          path: /tmp/testbench
          destination: testbench-report
