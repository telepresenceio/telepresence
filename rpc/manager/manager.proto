syntax = "proto3";

// The "manager" package describes the server implemented by the
// in-cluster Manager, which is spoken to by the Agent (app-sidecar),
// the on-laptop Connector (user-daemon), the on-laptop CLI. and the
// SystemA cloud service.
package telepresence.manager;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/telepresenceio/telepresence/rpc/v2/manager";

// ClientInfo is the self-reported metadata that the on-laptop
// Telepresence client reports whenever it connects to the in-cluster
// Manager.
message ClientInfo {
  string name = 1;  // user@hostname
  string install_id = 2;
  string product = 3;  // "telepresence"
  string version = 4;
  string api_key = 5;
}

// AgentInfo is the self-reported metadata that an Agent (app-sidecar)
// reports at boot-up when it connects to the Telepresence Manager.
message AgentInfo {
  string name = 1;      // name of the Workload
  string namespace = 7; // namespace of the Workload
  string pod_ip = 2;    // Pod IP (from status.podIP)
  string product = 3;   // distinguish open source, our closed source, someone else's thing
  string version = 4;

  // "Mechanisms" are the ways that an Agent can decide handle
  // incoming requests, and decide whether to send them to the
  // in-cluster service, or whether to intercept them.  The "tcp"
  // mechanism is the only one in Telepresence open source, and
  // handles things at the TCP-level and either intercepts all TCP
  // streams or doesn't intercept anything.  Other Agents than the
  // Telepresence one may implement more mechanisms, such as
  // Ambassador Labs' "Service Preview" Agent which implements the
  // "http" mechanism which handles th "http" mechanism, which handles
  // things at the HTTP-request-level and can decide to intercept
  // individual HTTP requests based on the request headers.
  message Mechanism {
    string name = 1; // "tcp" or "http" or "grpc" or ...
    string product = 2; // distinguish open source, our closed source, someone else's thing
    string version = 3;
  }

  // This is a list of the mechanisms that the Agent advertises that
  // it supports.
  repeated Mechanism mechanisms = 5;

  // The environment of the app
  // Deprecated: Only older agents will set this. Newer ones will instead
  // use the InterceptInfo.environment because the environment differs depending
  // on what container it is that gets intercepted
  map<string, string> environment = 6;
}

// InterceptSpec contains static information about an intercept. It is shared by
// all running agent instances.
message InterceptSpec {
  // A human-friendly name for this intercept.  This is usually the
  // same as the agent name below; the name/namespace of the
  // Workload, but it could be something else.  It is invalid for
  // the same client to attempt to create multiple intercepts with the
  // same name.
  string name = 1;

  // Same as ClientInfo.Name; "user@hostname".
  string client = 2;

  // Same as AgentInfo.Name of the Workload.
  string agent = 3;

  // Kind of the Workload
  string workload_kind = 13;

  // Same as AgentInfo.Namespace of the Workload
  string namespace = 8;

  // How to decide which subset of requests to that agent to intercept.
  string mechanism = 4;

  // Additional mechanism-specific arguments.  This is passed as list
  // of CLI-style --flags.  See the documentation for
  // github.com/telepresenceio/telepresence/v2/pkg/client/cli/extensions
  // for more information about writing an extension descriptor file
  // to control what these values are.
  repeated string mechanism_args = 9;

  string target_host = 6;

  // The port on the workstation that the intercept is redirected to
  int32 target_port = 7;

  // Identifier for the service port: either the name or port number
  // optionally followed by a "/TCP" or "/UDP"
  string service_port_identifier = 10;

  // The resolved service port name
  string service_port_name = 19;

  // The resolved service port
  int32 service_port = 20;

  // The resolved protocol used by the service port
  string protocol = 21; // TCP or UDP

  // .uid.metadata of service associated with intercept
  string service_uid = 12;

  // name of the aforementioned service
  string service_name = 14;

  // Extra ports that will be forwarded from the intercepting client's localhost
  // to the intercepted pod. Each entry is a string containing a port number followed
  // by an optional "/TCP" or "/UDP".
  repeated string local_ports = 18;

  // The delay imposed by a call roundtrip between the traffic-agent and
  // the client on the workstation. This delay is added to the dial_timeout
  // when the workstation performs a dial on behalf of the traffic-agent.
  int64 roundtrip_latency = 16;

  // The dial timeout to use when a dial is made on the intercepting workstation.
  int64 dial_timeout = 17;

  // Extra ports that will be forwarded from the intercepting client's localhost
  // to the intercepted pod.
  // Deprecated: use local_ports instead
  repeated int32 extra_ports = 15;

  // Used to be mount_point and only utilized when passing the spec between
  // the user daemon and the CLI. It's now moved to InterceptInfo
  string reserved = 11;
}

enum InterceptDispositionType {
  UNSPECIFIED = 0;

  ACTIVE = 1;
  WAITING = 2;

  // Failure states

  // What does "NO_CLIENT" mean?  The Manager garbage-collects the
  // intercept if the client goes away.
  NO_CLIENT = 3;

  // NO_AGENT indicates that there are no currently-running agents
  // that can service the intercept, or that there is a inconsistency
  // between the agents that are running.  This may be an ephemeral
  // state, such as inconsistency between agents during the middle of
  // a rolling update.
  NO_AGENT = 4;

  // NO_MECHANISM indicates that the agent(s) that would handle this
  // intercept do not report that they support the mechanism of the
  // intercept.  For example, if you are running the OSS agent but ask
  // for an intercept using the "http" mechanism, which requires the
  // Ambassador Telepresence agent.
  NO_MECHANISM = 5;

  // NO_PORT indicates that the manager was unable to allocate a port
  // to act as the rendezvous point between the client and the agent.
  NO_PORTS = 6;

  // AGENT_ERROR indicates that the intercept was submitted to an
  // agent, but that the agent rejected it (by calling
  // ReviewIntercept).
  AGENT_ERROR = 7;

  // BAD_ARGS indicates that something about the mechanism_args is
  // invalid.
  BAD_ARGS = 8;
}

message IngressInfo {
  // The layer-3 host
  string host = 1;

  // The layer-4 port
  int32 port = 2;

  // Whether or not to use TLS on the port
  bool use_tls = 3;

  // The layer-5 host
  string l5host = 4;
}

message PreviewSpec {
  IngressInfo ingress = 1;
  bool display_banner = 2;
  string pull_request_url = 3;
  map<string,string> add_request_headers = 4;
}

// InterceptInfo contains information about a live intercept in an agent
message InterceptInfo {
  InterceptSpec spec = 1;

  string id = 5;
  SessionInfo client_session = 6;

  // api_key is the api_key provided by the user's machine
  // if they are logged in.  This is used by extensions to
  // authenticate with external APIs, such as SystemA.
  string api_key = 13;

  // preview_domain is the SystemA domain that will proxy in traffic
  // to this intercept, and preview_ingress is where it will get
  // proxied to.  They both get set by the manager when the client
  // makes a call to UpdateIntercept with add_preview_domain set.
  string preview_domain = 7;
  PreviewSpec preview_spec = 9;

  // The current intercept state; a status code and a human-friendly
  // message to go along with the status code.  These may be set
  // manager itself, or may be set by the agent's call to
  // ReviewIntercept.
  InterceptDispositionType disposition = 3;
  string message = 4;

  // The Pod name and sftp port to use when doing sshfs mounts.  These
  // are set by the agent's call to ReviewIntercept.
  string pod_ip = 10;
  int32 sftp_port = 11;
  int32 ftp_port = 18;

  // The directory where the client mounts the remote mount_point. Only
  // set when obtaining InterceptInfo from the user daemon.
  string client_mount_point = 2;

  // The directory where the intercept mounts can be found in the agent
  string mount_point = 16;

  // A human-friendly description of what the spec.mechanism_args say.
  // This is set by the agent's call to ReviewIntercept.
  string mechanism_args_desc = 12;

  // Headers used by the workstation API-server
  map<string,string> headers = 14;

  // Metadata used by the workstation API-server
  map<string,string> metadata = 15;

  // The environment of the intercepted app
  map<string, string> environment = 17;
}

message SessionInfo {
  string session_id = 1;
  string cluster_id = 2;
  optional string install_id = 3;
}

message AgentsRequest {
  SessionInfo session = 1;
  repeated string namespaces = 2;
}

message AgentInfoSnapshot {
  repeated AgentInfo agents = 1;
}

message InterceptInfoSnapshot {
  repeated InterceptInfo intercepts = 1;
}

message CreateInterceptRequest {
  SessionInfo session = 1;
  InterceptSpec intercept_spec = 2;
  string api_key = 3;
}

message PreparedIntercept {
  string error = 1;
  int32 error_category = 2;

  string namespace = 3;
  string service_uid = 4;
  string service_name = 5;
  string service_port_name = 6;
  int32 service_port = 7;
  string protocol = 10; // TCP or UDP
  string workload_kind = 8;
  string agent_image = 9;
}

message UpdateInterceptRequest {
  SessionInfo session = 1;
  string name = 2;

  oneof preview_domain_action {
    PreviewSpec add_preview_domain = 5;
    bool remove_preview_domain = 4;
  }
}

message RemoveInterceptRequest2 {
  SessionInfo session = 1;
  string name = 2;
}

message GetInterceptRequest {
  SessionInfo session = 1;
  string name = 2;
}

message ReviewInterceptRequest {
  SessionInfo session = 1;
  string id = 2;
  InterceptDispositionType disposition = 3;
  string message = 4;

  // pod IP and sftp port to use when doing sshfs mounts
  string pod_ip = 5;
  int32 sftp_port = 6;
  int32 ftp_port = 12;

  // The directory where the intercept mounts can be found in the agent
  string mount_point = 10;

  // A human-friendly description of what the
  // InterceptSpec.mechanism_args say.
  string mechanism_args_desc = 7;

  // Headers used by the workstation API-server
  map<string,string> headers = 8;

  // Metadata used by the workstation API-server
  map<string,string> metadata = 9;

  // The environment of the intercepted app
  map<string, string> environment = 11;
}

message RemainRequest {
  SessionInfo session = 1;
  string api_key = 2;
}

message LogLevelRequest {
  string log_level = 1;

  // The time that this log-level will be in effect before
  // falling back to the configured log-level.
  google.protobuf.Duration duration = 2;
}

// Deprecated.
message GetLogsRequest {
  // Whether or not logs from the traffic-manager are desired.
  bool traffic_manager = 1;

  // The traffic-agent(s) logs are desired from. Can be `all`, `False`,
  // or substring to filter based on pod names.
  string agents = 2;

  // Whether or not to get the pod yaml deployed to the cluster.
  bool get_pod_yaml = 3;
}

// Deprecated.
message LogsResponse {

  // The map contains assocations between <podName.namespace> and the logs
  // from that pod.
  map<string, string> pod_logs = 1;

  // Errors encountered when getting logs from the traffic-manager
  // and/or traffic-agents.
  string err_msg = 2;

  // The map contains assocations between <podName.namespace> and the pod's
  // yaml.
  map<string, string> pod_yaml = 3;
}

message TelepresenceAPIInfo {
  // The port that the TelepresenceAPI is using, or 0 if it's not enabled
  int32 port = 1;
}

// VersionInfo2 is different than telepresence.common.VersionInfo in
// that it does not contain an 'api_version' integer.
message VersionInfo2 {
  string version = 2;
}

// All of a license's fields come from the license secret
message License {
  string license = 1;
  string host = 2;
  string cluster_id = 3;
  string err_msg = 4;
}

// The host and port used to connect to Ambassador Cloud.
// Used by the agents to communicate over gRPC to have
// Ambassador Cloud review intercepts
message AmbassadorCloudConfig {
  string host = 1;
  string port = 2;
  optional bytes proxy_ca = 3;
}

//
message AmbassadorCloudConnection {
  bool can_connect = 1;
}

// ConnMessage is a payload intended for a connection with a given id.
// Deprecated. Telepresence now uses connection specific Tunnels and TunnelMessages
message ConnMessage {
  // conn_id is composed of L4 protocol, source IP, source port, destination IP and destination port
  bytes conn_id = 1;
  bytes payload = 5;
}

// TunnelMessage is a message sent over a Tunnel. First byte indicates type of message
message TunnelMessage {
  bytes payload = 1;
}

message DialRequest {
  bytes conn_id = 1;
  int64 roundtrip_latency = 2;
  int64 dial_timeout = 3;
  map<string,string> trace_context = 4;
}

// LookupHost request sent from a client
// Deprecated: Retained for backward compatibility. Replaced by DNSRequest
message LookupHostRequest {
  // Client session
  SessionInfo session = 1;
  string name = 2;
}

// Deprecated: Retained for backward compatibility. Replaced by DNSResponse
message LookupHostResponse {
  repeated bytes ips = 1;
}

// Deprecated: Retained for backward compatibility. Replaced by DNSAgentResponse
message LookupHostAgentResponse {
  // Agent session
  SessionInfo session = 1;

  // LookupHostRequest is the request that this is a response to
  LookupHostRequest request = 2;

  // The response, which might be nil in case no address was found
  LookupHostResponse response = 3;
}

// LookupHost request sent from a client
message DNSRequest {
  // Client session
  SessionInfo session = 1;
  string name = 2;
  uint32 type = 3;
}

message DNSResponse {
  // DNS return code
  int32 r_code = 1;

  // rrs is an array of packed RR records
  bytes rrs = 2;
}

message DNSAgentResponse {
  // Agent session
  SessionInfo session = 1;

  // DNSRequest is the request that this is a response to
  DNSRequest request = 2;

  // The response, which might be nil in case no address was found
  DNSResponse response = 3;
}

// IPNet is a subnet. e.g. 10.43.0.0/16
message IPNet {
  bytes ip = 1;
  int32 mask = 2;
}

// ClusterInfo contains information that the root daemon needs in order to
// establish outbound traffic to the cluster.
message ClusterInfo {
  // service_subnet is the Kubernetes service subnet
  IPNet service_subnet = 2;

  // pod_subnets are the subnets used for Kubenetes pods.
  repeated IPNet pod_subnets = 3;

  // manager_pod_ip is the ip address of the traffic manager
  bytes manager_pod_ip = 5;

  // manager_pod_port is the port of the traffic manager
  int32 manager_pod_port = 8;

  // Router configuration
  Routing routing = 6;

  // DNS configuration
  DNS dns = 7;

  // kube_dns_ip is the IP address of the kube-dns.kube-system service,
  // Deprecated: Use dns.kube_ip
  bytes kube_dns_ip = 1;

  // cluster_domain is the domain of the cluster, ending with a dot, e.g. "cluster.local."
  // Deprecated: Use dns.cluster_domain
  string cluster_domain = 4;
}

message Routing {
  repeated IPNet also_proxy_subnets = 1;
  repeated IPNet never_proxy_subnets = 2;
}

message DNS {
  repeated string include_suffixes = 1;
  repeated string exclude_suffixes = 2;

  // kube_dns_ip is the IP address of the kube-dns.kube-system service,
  // Deprecated: No longer used by clients >= 2.8.0
  bytes kube_ip = 3;

  // cluster_domain is the domain of the cluster, ending with a dot, e.g. "cluster.local."
  string cluster_domain = 4;
}

message CLIConfig {
  // config_yaml is a yaml blob containing the client config.
  bytes config_yaml = 1;
}

enum Mode {
  MODE_UNSPECIFIED = 0;
  MODE_SINGLE = 1;
  MODE_TEAM = 2;
}

message StatusInfo {
  VersionInfo2 version = 1;
  Mode mode = 2;
  int32 client_count = 3;
}

service Manager {
  // Version returns the version information of the Manager.
  rpc Version(google.protobuf.Empty) returns (VersionInfo2);

  // Status returns some of the traffic manager's state information.
  // Includes version, mode and client count.
  rpc Status(google.protobuf.Empty) returns (StatusInfo);

  // GetLicense returns the License information (the license itself and
  // domain that granted it) known to the manager.
  rpc GetLicense(google.protobuf.Empty) returns (License);

  // CanConnectAmbassadorCloud returns whether or not the cluster is able to talk to
  // Ambassador Cloud
  rpc CanConnectAmbassadorCloud(google.protobuf.Empty) returns (AmbassadorCloudConnection);

  // GetCloudConfig returns the config (host + port) for Ambassador Cloud for use
  // by the agents.
  rpc GetCloudConfig(google.protobuf.Empty) returns (AmbassadorCloudConfig);

  // GetClientConfig returns the config that connected clients should use for this manager.
  rpc GetClientConfig(google.protobuf.Empty) returns (CLIConfig);

  // GetTelepresenceAPI returns information about the TelepresenceAPI server
  rpc GetTelepresenceAPI(google.protobuf.Empty) returns (TelepresenceAPIInfo);

  // Presence

  // ArriveAsClient establishes a session between a client and the Manager.
  rpc ArriveAsClient(ClientInfo) returns (SessionInfo);

  // ArriveAsAgent establishes a session between an agent and the Manager.
  rpc ArriveAsAgent(AgentInfo) returns (SessionInfo);

  // Remain indicates that the session is still valid, and potentially
  // updates the auth token for the session.
  rpc Remain(RemainRequest) returns (google.protobuf.Empty);

  // Depart terminates a session.
  rpc Depart(SessionInfo) returns (google.protobuf.Empty);

  // SetLogLevel will temporarily set the log-level for the traffic-manager and all
  // traffic-agents for a duration that is determined b the request.
  rpc SetLogLevel(LogLevelRequest) returns (google.protobuf.Empty);

  // GetLogs will acquire logs for the various Telepresence components in kubernetes
  // (pending the request) and return them to the caller
  // Deprecated: Will return an empty response
  rpc GetLogs(GetLogsRequest) returns (LogsResponse);

  // Watches

  // WatchAgents notifies a client of the set of known Agents.
  //
  // A session ID is required; if no session ID is given then the call
  // returns immediately, having not delivered any snapshots.
  rpc WatchAgents(SessionInfo) returns (stream AgentInfoSnapshot);

  // WatchAgentsNS is like WatchAgents but limited to a set of namespaces
  rpc WatchAgentsNS(AgentsRequest) returns (stream AgentInfoSnapshot);

  // WatchIntercepts notifies a client or agent of the set of intercepts
  // relevant to that client or agent.
  //
  // If a session ID is given, then only intercepts associated with
  // that session are watched.  If no session ID is given, then all
  // intercepts are watched.
  rpc WatchIntercepts(SessionInfo) returns (stream InterceptInfoSnapshot);

  // WatchClusterInfo returns information needed when establishing
  // connectivity to the cluster.
  rpc WatchClusterInfo(SessionInfo) returns (stream ClusterInfo);

  // CRUD

  // Request that the traffic-manager makes the preparations necessary to
  // create the given intercept.
  rpc PrepareIntercept(CreateInterceptRequest) returns (PreparedIntercept);

  // CreateIntercept lets a client create an intercept.  It will be
  // created in the "WATING" disposition, and it will remain in that
  // state until the Agent (the app-sidecar) calls ReviewIntercept()
  // to transition it to the "ACTIVE" disposition (or one of the error
  // dispositions).
  rpc CreateIntercept(CreateInterceptRequest) returns (InterceptInfo);

  // RemoveIntercept lets a client remove an intercept.
  rpc RemoveIntercept(RemoveInterceptRequest2) returns (google.protobuf.Empty);

  rpc UpdateIntercept(UpdateInterceptRequest) returns (InterceptInfo);

  // GetIntercept gets info from intercept name
  rpc GetIntercept(GetInterceptRequest) returns (InterceptInfo);

  // ReviewIntercept lets an agent approve or reject an intercept by
  // changing the disposition from "WATING" to "ACTIVE" or to an
  // error, and setting a human-readable status message.
  rpc ReviewIntercept(ReviewInterceptRequest) returns (google.protobuf.Empty);

  // ClientTunnel receives messages from the client and dispatches them to tracked
  // net.Conn instances in the traffic-manager. Responses from tracked instances
  // are sent back on the returned message stream
  rpc ClientTunnel(stream ConnMessage) returns (stream ConnMessage);

  // AgentTunnel receives messages from the agent and dispatches them to tracked
  // net.Conn instances in the traffic-manager. Responses from tracked instances
  // are sent back on the returned message stream
  rpc AgentTunnel(stream ConnMessage) returns (stream ConnMessage);

  // LookupHost performs a DNS lookup in the cluster. If the caller has intercepts
  // active, the lookup will be performed from the intercepted pods.
  // Deprecated: Retained for backward compatibility. Replaced by LookupDNS
  rpc LookupHost(LookupHostRequest) returns (LookupHostResponse);

  // AgentLookupHostResponse lets an agent respond for lookup requests
  // Deprecated: Retained for backward compatibility. Replaced by AgentLookupDNSResponse
  rpc AgentLookupHostResponse(LookupHostAgentResponse) returns (google.protobuf.Empty);

  // WatchLookupHost lets an agent receive lookup requests
  // Deprecated: Retained for backward compatibility. Replaced by WatchLookupDNS
  rpc WatchLookupHost(SessionInfo) returns (stream LookupHostRequest);

  // LookupDNS performs a DNS lookup in the cluster. If the caller has intercepts
  // active, the lookup will be performed from the intercepted pods.
  rpc LookupDNS(DNSRequest) returns (DNSResponse);

  // AgentLookupHostResponse lets an agent respond for lookup requests
  rpc AgentLookupDNSResponse(DNSAgentResponse) returns (google.protobuf.Empty);

  // WatchLookupHost lets an agent receive lookup requests
  rpc WatchLookupDNS(SessionInfo) returns (stream DNSRequest);

  // WatchLogLevel lets an agent receive log-level updates
  rpc WatchLogLevel(google.protobuf.Empty) returns (stream LogLevelRequest);

  // A Tunnel represents one single connection where the client or
  // traffic-agent represents one end (the client-side) and the
  // traffic-manager represents the other (the server side). The first
  // message that a client sends when the tunnel is established is will
  // always contain the session ID, connection ID, and timeouts used by
  // the dialer endpoints.
  rpc Tunnel(stream TunnelMessage) returns (stream TunnelMessage);

  // WatchDial makes it possible for the client side to receive
  // DialRequests from the traffic-manager. Requests are sent when an
  // intercepted traffic-agent creates a Tunnel that needs to be extended
  // to the Telepresence client on the workstation, or the other way around,
  // when that client creates a tunnel that needs to be extended to an
  // intercepted traffic agent. The receiver of the request dials a
  // connection and responds with a Tunnel. The manager then connects the
  // two tunnels.
  rpc WatchDial(SessionInfo) returns (stream DialRequest);
}
