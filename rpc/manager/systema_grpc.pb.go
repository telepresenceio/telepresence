// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: manager/systema.proto

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerProxyClient is the client API for ManagerProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerProxyClient interface {
	// The first argument chunk must be an "intercept_id"; after that no
	// chunk may be an intercept_id.  System A calls this when it
	// recieves a connection to "XYZ.preview.edgestack.me", and that
	// domain belongs to an intercept that belongs to this manager.
	HandleConnection(ctx context.Context, opts ...grpc.CallOption) (ManagerProxy_HandleConnectionClient, error)
}

type managerProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerProxyClient(cc grpc.ClientConnInterface) ManagerProxyClient {
	return &managerProxyClient{cc}
}

func (c *managerProxyClient) HandleConnection(ctx context.Context, opts ...grpc.CallOption) (ManagerProxy_HandleConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManagerProxy_ServiceDesc.Streams[0], "/telepresence.manager.ManagerProxy/HandleConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerProxyHandleConnectionClient{stream}
	return x, nil
}

type ManagerProxy_HandleConnectionClient interface {
	Send(*ConnectionChunk) error
	Recv() (*ConnectionChunk, error)
	grpc.ClientStream
}

type managerProxyHandleConnectionClient struct {
	grpc.ClientStream
}

func (x *managerProxyHandleConnectionClient) Send(m *ConnectionChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *managerProxyHandleConnectionClient) Recv() (*ConnectionChunk, error) {
	m := new(ConnectionChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerProxyServer is the server API for ManagerProxy service.
// All implementations must embed UnimplementedManagerProxyServer
// for forward compatibility
type ManagerProxyServer interface {
	// The first argument chunk must be an "intercept_id"; after that no
	// chunk may be an intercept_id.  System A calls this when it
	// recieves a connection to "XYZ.preview.edgestack.me", and that
	// domain belongs to an intercept that belongs to this manager.
	HandleConnection(ManagerProxy_HandleConnectionServer) error
	mustEmbedUnimplementedManagerProxyServer()
}

// UnimplementedManagerProxyServer must be embedded to have forward compatible implementations.
type UnimplementedManagerProxyServer struct {
}

func (UnimplementedManagerProxyServer) HandleConnection(ManagerProxy_HandleConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleConnection not implemented")
}
func (UnimplementedManagerProxyServer) mustEmbedUnimplementedManagerProxyServer() {}

// UnsafeManagerProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerProxyServer will
// result in compilation errors.
type UnsafeManagerProxyServer interface {
	mustEmbedUnimplementedManagerProxyServer()
}

func RegisterManagerProxyServer(s grpc.ServiceRegistrar, srv ManagerProxyServer) {
	s.RegisterService(&ManagerProxy_ServiceDesc, srv)
}

func _ManagerProxy_HandleConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagerProxyServer).HandleConnection(&managerProxyHandleConnectionServer{stream})
}

type ManagerProxy_HandleConnectionServer interface {
	Send(*ConnectionChunk) error
	Recv() (*ConnectionChunk, error)
	grpc.ServerStream
}

type managerProxyHandleConnectionServer struct {
	grpc.ServerStream
}

func (x *managerProxyHandleConnectionServer) Send(m *ConnectionChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *managerProxyHandleConnectionServer) Recv() (*ConnectionChunk, error) {
	m := new(ConnectionChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerProxy_ServiceDesc is the grpc.ServiceDesc for ManagerProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.manager.ManagerProxy",
	HandlerType: (*ManagerProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleConnection",
			Handler:       _ManagerProxy_HandleConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "manager/systema.proto",
}
