syntax = "proto3";

// The "systema" package describes the server implemented by the
// SystemA cloud service, which is called to by the in-cluster
// Telepresence manager and the in-cluster Ambassador Telepresence
// agent sidecars.
package telepresence.systema;

import "common/version.proto";
import "google/protobuf/empty.proto";
import "manager/manager.proto";

option go_package = "github.com/telepresenceio/telepresence/rpc/v2/systema";

message Chunk {
  bytes content = 1;
}

// Calls from the manager to Ambassador Cloud (System A) are authenticated via API keys per
// https://www.notion.so/datawire/Telepresence-System-A-API-Key-Integration-c13c4676e9944abfb02713b8517051e3
// (see also: pkg/client/userd/auth/apikey.go, cmd/traffic/cmd/manager/systema.go:systemaCredentials)."
service SystemACRUD {
  // CreateDomain requires that the manager authenticate using an
  // end-user's API key, to perform the action on behalf of that
  // user.
  rpc CreateDomain(CreateDomainRequest) returns (CreateDomainResponse);

  // RemoveDomain removes a domain that was previously created by the
  // same manager using CreateDomain.  The manager can take this
  // action itself, not on behalf of the user that created the domain,
  // so this requires that the manager authenticate itself, but does
  // not require an end-user's API key.
  rpc RemoveDomain(RemoveDomainRequest) returns (google.protobuf.Empty);

  // RemoveIntercept is used to inform AmbassadorCloud (SystemA) that an
  // intercept has been removed.
  rpc RemoveIntercept(InterceptRemoval) returns (google.protobuf.Empty);

  // PreferredAgent returns the active account's perferred agent
  // sidecar, for the given Telepresence version.
  rpc PreferredAgent(common.VersionInfo) returns (PreferredAgentResponse);
}

// Calls from the manager to Ambassador Cloud (System A) are authenticated via API keys per
// https://www.notion.so/datawire/Telepresence-System-A-API-Key-Integration-c13c4676e9944abfb02713b8517051e3
// (see also: pkg/client/userd/auth/apikey.go, cmd/traffic/cmd/manager/systema.go:systemaCredentials)."
service SystemAProxy {
  // ReverseConnection establishes a stream that is used for System A
  // to send gRPC requests back to the manager.  This requires that
  // the manager authenticate itself, but does not require an
  // end-user's token.
  rpc ReverseConnection(stream Chunk) returns (stream Chunk);
}

message CreateDomainRequest {
  string intercept_id = 1;
  bool display_banner = 2;
  manager.InterceptSpec intercept_spec = 3;
  string host = 4;
  string pull_request_url = 5;
  map<string,string> add_request_headers = 6;
}

message CreateDomainResponse {
  string domain = 1;
}

message RemoveDomainRequest {
  string domain = 1;
}

message InterceptRemoval {
  string intercept_id = 1;
}

message PreferredAgentResponse {
  string image_name = 1;
}
