// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: rpc/userdaemon/userdaemon.proto

package userdaemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemAClient is the client API for SystemA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemAClient interface {
	// ReportAvailableServices sends a list of services that the daemon has access to.
	//
	// This RPC is only used by the proprietary user-daemon and not the OSS one.
	ReportAvailableServices(ctx context.Context, opts ...grpc.CallOption) (SystemA_ReportAvailableServicesClient, error)
	// GetNamespacesToWatch returns a list of namespaces that the user daemon should watch for workloads that can be
	// intercepted based on a list of namespaces that the user has access to.
	//
	// This RPC is only used by the proprietary user-daemon and not the OSS one.
	GetNamespacesToWatch(ctx context.Context, in *NamespacesToWatchRequest, opts ...grpc.CallOption) (*NamespacesToWatchResponse, error)
	// ResolveInterceptIngressInfo gets the ingress information that the daemon should use to create the preview url
	// associated with an intercept
	ResolveIngressInfo(ctx context.Context, in *IngressInfoRequest, opts ...grpc.CallOption) (*IngressInfoResponse, error)
	// ReportAvailableNamespaces
	ReportAvailableNamespaces(ctx context.Context, opts ...grpc.CallOption) (SystemA_ReportAvailableNamespacesClient, error)
	// ReportInterceptCreation allows the proprietary user-daemon to report intercept creation once the intercept command
	// has completed
	ReportInterceptCreation(ctx context.Context, in *InterceptCreationResult, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetSavedIntercept allows the proprietary user-daemon to retrieve a saved intercept so that it can instantiate it
	GetSavedIntercept(ctx context.Context, in *GetSavedInterceptRequest, opts ...grpc.CallOption) (*SavedIntercept, error)
}

type systemAClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemAClient(cc grpc.ClientConnInterface) SystemAClient {
	return &systemAClient{cc}
}

func (c *systemAClient) ReportAvailableServices(ctx context.Context, opts ...grpc.CallOption) (SystemA_ReportAvailableServicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SystemA_ServiceDesc.Streams[0], "/telepresence.userdaemon.SystemA/ReportAvailableServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &systemAReportAvailableServicesClient{stream}
	return x, nil
}

type SystemA_ReportAvailableServicesClient interface {
	Send(*AvailableServicesRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type systemAReportAvailableServicesClient struct {
	grpc.ClientStream
}

func (x *systemAReportAvailableServicesClient) Send(m *AvailableServicesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *systemAReportAvailableServicesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systemAClient) GetNamespacesToWatch(ctx context.Context, in *NamespacesToWatchRequest, opts ...grpc.CallOption) (*NamespacesToWatchResponse, error) {
	out := new(NamespacesToWatchResponse)
	err := c.cc.Invoke(ctx, "/telepresence.userdaemon.SystemA/GetNamespacesToWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAClient) ResolveIngressInfo(ctx context.Context, in *IngressInfoRequest, opts ...grpc.CallOption) (*IngressInfoResponse, error) {
	out := new(IngressInfoResponse)
	err := c.cc.Invoke(ctx, "/telepresence.userdaemon.SystemA/ResolveIngressInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAClient) ReportAvailableNamespaces(ctx context.Context, opts ...grpc.CallOption) (SystemA_ReportAvailableNamespacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SystemA_ServiceDesc.Streams[1], "/telepresence.userdaemon.SystemA/ReportAvailableNamespaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &systemAReportAvailableNamespacesClient{stream}
	return x, nil
}

type SystemA_ReportAvailableNamespacesClient interface {
	Send(*AvailableNamespacesRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type systemAReportAvailableNamespacesClient struct {
	grpc.ClientStream
}

func (x *systemAReportAvailableNamespacesClient) Send(m *AvailableNamespacesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *systemAReportAvailableNamespacesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systemAClient) ReportInterceptCreation(ctx context.Context, in *InterceptCreationResult, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/telepresence.userdaemon.SystemA/ReportInterceptCreation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemAClient) GetSavedIntercept(ctx context.Context, in *GetSavedInterceptRequest, opts ...grpc.CallOption) (*SavedIntercept, error) {
	out := new(SavedIntercept)
	err := c.cc.Invoke(ctx, "/telepresence.userdaemon.SystemA/GetSavedIntercept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemAServer is the server API for SystemA service.
// All implementations must embed UnimplementedSystemAServer
// for forward compatibility
type SystemAServer interface {
	// ReportAvailableServices sends a list of services that the daemon has access to.
	//
	// This RPC is only used by the proprietary user-daemon and not the OSS one.
	ReportAvailableServices(SystemA_ReportAvailableServicesServer) error
	// GetNamespacesToWatch returns a list of namespaces that the user daemon should watch for workloads that can be
	// intercepted based on a list of namespaces that the user has access to.
	//
	// This RPC is only used by the proprietary user-daemon and not the OSS one.
	GetNamespacesToWatch(context.Context, *NamespacesToWatchRequest) (*NamespacesToWatchResponse, error)
	// ResolveInterceptIngressInfo gets the ingress information that the daemon should use to create the preview url
	// associated with an intercept
	ResolveIngressInfo(context.Context, *IngressInfoRequest) (*IngressInfoResponse, error)
	// ReportAvailableNamespaces
	ReportAvailableNamespaces(SystemA_ReportAvailableNamespacesServer) error
	// ReportInterceptCreation allows the proprietary user-daemon to report intercept creation once the intercept command
	// has completed
	ReportInterceptCreation(context.Context, *InterceptCreationResult) (*emptypb.Empty, error)
	// GetSavedIntercept allows the proprietary user-daemon to retrieve a saved intercept so that it can instantiate it
	GetSavedIntercept(context.Context, *GetSavedInterceptRequest) (*SavedIntercept, error)
	mustEmbedUnimplementedSystemAServer()
}

// UnimplementedSystemAServer must be embedded to have forward compatible implementations.
type UnimplementedSystemAServer struct {
}

func (UnimplementedSystemAServer) ReportAvailableServices(SystemA_ReportAvailableServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportAvailableServices not implemented")
}
func (UnimplementedSystemAServer) GetNamespacesToWatch(context.Context, *NamespacesToWatchRequest) (*NamespacesToWatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespacesToWatch not implemented")
}
func (UnimplementedSystemAServer) ResolveIngressInfo(context.Context, *IngressInfoRequest) (*IngressInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveIngressInfo not implemented")
}
func (UnimplementedSystemAServer) ReportAvailableNamespaces(SystemA_ReportAvailableNamespacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportAvailableNamespaces not implemented")
}
func (UnimplementedSystemAServer) ReportInterceptCreation(context.Context, *InterceptCreationResult) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportInterceptCreation not implemented")
}
func (UnimplementedSystemAServer) GetSavedIntercept(context.Context, *GetSavedInterceptRequest) (*SavedIntercept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedIntercept not implemented")
}
func (UnimplementedSystemAServer) mustEmbedUnimplementedSystemAServer() {}

// UnsafeSystemAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemAServer will
// result in compilation errors.
type UnsafeSystemAServer interface {
	mustEmbedUnimplementedSystemAServer()
}

func RegisterSystemAServer(s grpc.ServiceRegistrar, srv SystemAServer) {
	s.RegisterService(&SystemA_ServiceDesc, srv)
}

func _SystemA_ReportAvailableServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SystemAServer).ReportAvailableServices(&systemAReportAvailableServicesServer{stream})
}

type SystemA_ReportAvailableServicesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*AvailableServicesRequest, error)
	grpc.ServerStream
}

type systemAReportAvailableServicesServer struct {
	grpc.ServerStream
}

func (x *systemAReportAvailableServicesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *systemAReportAvailableServicesServer) Recv() (*AvailableServicesRequest, error) {
	m := new(AvailableServicesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SystemA_GetNamespacesToWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespacesToWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAServer).GetNamespacesToWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.userdaemon.SystemA/GetNamespacesToWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAServer).GetNamespacesToWatch(ctx, req.(*NamespacesToWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemA_ResolveIngressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAServer).ResolveIngressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.userdaemon.SystemA/ResolveIngressInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAServer).ResolveIngressInfo(ctx, req.(*IngressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemA_ReportAvailableNamespaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SystemAServer).ReportAvailableNamespaces(&systemAReportAvailableNamespacesServer{stream})
}

type SystemA_ReportAvailableNamespacesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*AvailableNamespacesRequest, error)
	grpc.ServerStream
}

type systemAReportAvailableNamespacesServer struct {
	grpc.ServerStream
}

func (x *systemAReportAvailableNamespacesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *systemAReportAvailableNamespacesServer) Recv() (*AvailableNamespacesRequest, error) {
	m := new(AvailableNamespacesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SystemA_ReportInterceptCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterceptCreationResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAServer).ReportInterceptCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.userdaemon.SystemA/ReportInterceptCreation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAServer).ReportInterceptCreation(ctx, req.(*InterceptCreationResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemA_GetSavedIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemAServer).GetSavedIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.userdaemon.SystemA/GetSavedIntercept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemAServer).GetSavedIntercept(ctx, req.(*GetSavedInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemA_ServiceDesc is the grpc.ServiceDesc for SystemA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.userdaemon.SystemA",
	HandlerType: (*SystemAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespacesToWatch",
			Handler:    _SystemA_GetNamespacesToWatch_Handler,
		},
		{
			MethodName: "ResolveIngressInfo",
			Handler:    _SystemA_ResolveIngressInfo_Handler,
		},
		{
			MethodName: "ReportInterceptCreation",
			Handler:    _SystemA_ReportInterceptCreation_Handler,
		},
		{
			MethodName: "GetSavedIntercept",
			Handler:    _SystemA_GetSavedIntercept_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportAvailableServices",
			Handler:       _SystemA_ReportAvailableServices_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportAvailableNamespaces",
			Handler:       _SystemA_ReportAvailableNamespaces_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/userdaemon/userdaemon.proto",
}
