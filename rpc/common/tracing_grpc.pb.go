// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: common/tracing.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TracingClient is the client API for Tracing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TracingClient interface {
	DumpTraces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Trace, error)
}

type tracingClient struct {
	cc grpc.ClientConnInterface
}

func NewTracingClient(cc grpc.ClientConnInterface) TracingClient {
	return &tracingClient{cc}
}

func (c *tracingClient) DumpTraces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Trace, error) {
	out := new(Trace)
	err := c.cc.Invoke(ctx, "/telepresence.common.Tracing/DumpTraces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TracingServer is the server API for Tracing service.
// All implementations must embed UnimplementedTracingServer
// for forward compatibility
type TracingServer interface {
	DumpTraces(context.Context, *emptypb.Empty) (*Trace, error)
	mustEmbedUnimplementedTracingServer()
}

// UnimplementedTracingServer must be embedded to have forward compatible implementations.
type UnimplementedTracingServer struct {
}

func (UnimplementedTracingServer) DumpTraces(context.Context, *emptypb.Empty) (*Trace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpTraces not implemented")
}
func (UnimplementedTracingServer) mustEmbedUnimplementedTracingServer() {}

// UnsafeTracingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TracingServer will
// result in compilation errors.
type UnsafeTracingServer interface {
	mustEmbedUnimplementedTracingServer()
}

func RegisterTracingServer(s grpc.ServiceRegistrar, srv TracingServer) {
	s.RegisterService(&Tracing_ServiceDesc, srv)
}

func _Tracing_DumpTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracingServer).DumpTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telepresence.common.Tracing/DumpTraces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracingServer).DumpTraces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Tracing_ServiceDesc is the grpc.ServiceDesc for Tracing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.common.Tracing",
	HandlerType: (*TracingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DumpTraces",
			Handler:    _Tracing_DumpTraces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/tracing.proto",
}
